#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 07, 2018 10:07:12 AM CET  platform: Windows NT
import _constants
today = _constants.Current_date()

import datetime
from datetime import timedelta
import pandas as pd
import sqlite3
from tkinter import messagebox
from tkinter import *
import time


pd.set_option('display.max_columns', 500)

conn = sqlite3.connect(
    'C:\\Users\\chenqi\\polybox\\Qian\\1 Doctoral Research\\16.02-AMF\\P6 GUI development\\data\\Aturm.sqlite')
cur = conn.cursor()

df_MP = pd.read_sql_query('select * from manufacturing_process', conn)
df_ETOs = pd.read_sql_query('select * from Structural_Column_Material_Takeoff', conn)
df_changes_field = pd.read_sql_query('select * from changes_field', conn)
df_changes_production = pd.read_sql_query('select * from changes_production', conn)
df_tasks = pd.read_sql_query('select * from Tasks', conn)
df_tasks['Start_Date'] = pd.to_datetime(df_tasks['Start_Date'])
df_transport = pd.read_sql_query('select * from transport_process', conn)
df_transport['release_for_transport_day'] = pd.to_datetime(df_transport['release_for_transport_day'])




import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Delivery_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    Delivery_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    Delivery_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        font10 = "-family {Courier New} -size 10 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("736x557+356+147")
        top.title("Delivery services")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        top.wm_iconbitmap('logo.ico')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.014, rely=0.018, height=31, width=314)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#91d1d8")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Input order ID''')
        self.Label1.configure(width=314)

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.462, rely=0.018,height=24, relwidth=0.277)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font=font10)
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")

        self.Label1_2 = tk.Label(top)
        self.Label1_2.place(relx=0.014, rely=0.09, height=31, width=314)
        self.Label1_2.configure(activebackground="#f9f9f9")
        self.Label1_2.configure(activeforeground="black")
        self.Label1_2.configure(background="#91d1d8")
        self.Label1_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2.configure(foreground="#000000")
        self.Label1_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2.configure(highlightcolor="black")
        self.Label1_2.configure(text='''Input vehicle ID''')
        self.Label1_2.configure(width=314)

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.014, rely=0.305, relheight=0.206
                , relwidth=0.448)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Forecasted transportation lead time''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")
        self.Labelframe1.configure(width=330)


        self.Text1 = tk.Text(self.Labelframe1)
        self.Text1.place(relx=0.03, rely=0.609, relheight=0.296, relwidth=0.8
                , bordermode='ignore')
        self.Text1.configure(background="white")
        self.Text1.configure(font=font9)
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(width=264)
        self.Text1.configure(wrap='word')


        def update_trans_leadtime():
            order_ID = self.Entry1.get()
            vehicle_ID = self.Entry1_7.get()
            unload_location = self.Entry1_8.get()
            trans_leadtime = self.Entry1_6.get()
            Actual_trans_leadtime = self.Entry1_5.get()

            for i in range(len(df_transport)):
                if df_transport.loc[i, 'order_ID'] == order_ID:
                    df_transport.loc[i ,'t_leadtime'] = trans_leadtime
                    df_transport.loc[i, 'Actual_t_leadtime'] = Actual_trans_leadtime
                    df_transport.loc[i, 'vehicle'] = vehicle_ID
                    df_transport.loc[i ,'unloading_location'] = unload_location
                else:
                    pass
            df_transport.to_sql('transport_process', conn, if_exists='replace', index=False)
            conn.commit()


        self.Button1 = tk.Button(top, command=update_trans_leadtime)
        self.Button1.place(relx=0.462, rely=0.592, height=31, width=81)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Update''')
        self.Button1.configure(width=81)

        self.Label1_3 = tk.Label(top)
        self.Label1_3.place(relx=0.014, rely=0.233, height=31, width=314)
        self.Label1_3.configure(activebackground="#f9f9f9")
        self.Label1_3.configure(activeforeground="black")
        self.Label1_3.configure(background="#91d1d8")
        self.Label1_3.configure(disabledforeground="#a3a3a3")
        self.Label1_3.configure(foreground="#000000")
        self.Label1_3.configure(highlightbackground="#d9d9d9")
        self.Label1_3.configure(highlightcolor="black")
        self.Label1_3.configure(text='''Input transportation lead time''')
        self.Label1_3.configure(width=314)

        self.Entry1_7 = tk.Entry(top)
        self.Entry1_7.place(relx=0.462, rely=0.09,height=24, relwidth=0.277)
        self.Entry1_7.configure(background="white")
        self.Entry1_7.configure(disabledforeground="#a3a3a3")
        self.Entry1_7.configure(font=font10)
        self.Entry1_7.configure(foreground="#000000")
        self.Entry1_7.configure(highlightbackground="#d9d9d9")
        self.Entry1_7.configure(highlightcolor="black")
        self.Entry1_7.configure(insertbackground="black")
        self.Entry1_7.configure(selectbackground="#c4c4c4")
        self.Entry1_7.configure(selectforeground="black")
        self.Entry1_7.configure(width=204)

        self.Entry1_8 = tk.Entry(top)
        self.Entry1_8.place(relx=0.462, rely=0.162,height=24, relwidth=0.277)
        self.Entry1_8.configure(background="white")
        self.Entry1_8.configure(disabledforeground="#a3a3a3")
        self.Entry1_8.configure(font=font10)
        self.Entry1_8.configure(foreground="#000000")
        self.Entry1_8.configure(highlightbackground="#d9d9d9")
        self.Entry1_8.configure(highlightcolor="black")
        self.Entry1_8.configure(insertbackground="black")
        self.Entry1_8.configure(selectbackground="#c4c4c4")
        self.Entry1_8.configure(selectforeground="black")


        def forecast_tl():
            messagebox.showinfo('Notification', 'Computing process still under construction')

        self.Button1_9 = tk.Button(top, command=forecast_tl)
        self.Button1_9.place(relx=0.027, rely=0.359, height=31, width=81)
        self.Button1_9.configure(activebackground="#ececec")
        self.Button1_9.configure(activeforeground="#000000")
        self.Button1_9.configure(background="#d9d9d9")
        self.Button1_9.configure(disabledforeground="#a3a3a3")
        self.Button1_9.configure(foreground="#000000")
        self.Button1_9.configure(highlightbackground="#d9d9d9")
        self.Button1_9.configure(highlightcolor="black")
        self.Button1_9.configure(pady="0")
        self.Button1_9.configure(text='''Query''')
        self.Button1_9.configure(width=81)

        self.Label1_4 = tk.Label(top)
        self.Label1_4.place(relx=0.014, rely=0.162, height=31, width=314)
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#91d1d8")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#d9d9d9")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''Input unloading location''')

        def view_orders():
            root1 = Tk()
            root1.title('All pending changes')
            root1.wm_iconbitmap('logo.ico')
            frame = Frame(root1)
            frame.pack()
            tree_1 = ttk.Treeview(frame, columns=(1, 2, 3, 4, 5, 6, 7), show='headings')
            tree_1.heading(1, text='order ID')
            tree_1.heading(2, text='RFID')
            tree_1.heading(3, text='Family and Type')
            tree_1.heading(4, text='Supplier')
            tree_1.heading(5, text='Length')
            tree_1.heading(6, text='Volume')
            tree_1.heading(7, text='Need Date')
            tree_1.pack(fill='both')
            scroll = ttk.Scrollbar(frame, orient='vertical', command=tree_1.yview)
            tree_1.configure(yscrollcommand=scroll.set)

            order_ID = self.Entry1.get()
            for i in range(len(df_MP)):
                for j in range(len(df_ETOs)):
                    if df_MP.loc[i, 'order_ID'] == order_ID and df_ETOs.loc[j, 'order_ID'] == order_ID:
                        a = df_ETOs.loc[j, 'task_ID']
                        for k in range(len(df_tasks)):
                            if a == df_tasks.loc[k, 'task_ID']:
                                need_date = df_tasks.loc[k, 'Start_Date']
                                tree_1.insert('', 'end', values=(df_MP.loc[i, 'order_ID'], df_ETOs.loc[j, 'RFID'],
                                                         df_ETOs.loc[j, 'Family'] + ' ' + df_ETOs.loc[j, 'Type'],
                                                         df_MP.loc[i, 'supplier_name'],
                                                         df_ETOs.loc[j, 'Length'], df_ETOs.loc[j, 'Material:_Volume'], str(need_date)))
                            else:
                                pass
                    else:
                        pass

        self.Button1_5 = tk.Button(top, command=view_orders)
        self.Button1_5.place(relx=0.761, rely=0.018, height=31, width=151)
        self.Button1_5.configure(activebackground="#ececec")
        self.Button1_5.configure(activeforeground="#000000")
        self.Button1_5.configure(background="#d9d9d9")
        self.Button1_5.configure(disabledforeground="#a3a3a3")
        self.Button1_5.configure(foreground="#000000")
        self.Button1_5.configure(highlightbackground="#d9d9d9")
        self.Button1_5.configure(highlightcolor="black")
        self.Button1_5.configure(pady="0")
        self.Button1_5.configure(text='''View orders''')
        self.Button1_5.configure(width=151)

        self.Entry1_6 = tk.Entry(top)
        self.Entry1_6.place(relx=0.462, rely=0.233,height=24, relwidth=0.277)
        self.Entry1_6.configure(background="white")
        self.Entry1_6.configure(disabledforeground="#a3a3a3")
        self.Entry1_6.configure(font=font10)
        self.Entry1_6.configure(foreground="#000000")
        self.Entry1_6.configure(highlightbackground="#d9d9d9")
        self.Entry1_6.configure(highlightcolor="black")
        self.Entry1_6.configure(insertbackground="black")
        self.Entry1_6.configure(selectbackground="#c4c4c4")
        self.Entry1_6.configure(selectforeground="black")

        self.Label1_4 = tk.Label(top)
        self.Label1_4.place(relx=0.014, rely=0.539, height=31, width=314)
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#91d1d8")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#d9d9d9")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''Actual transportation lead time''')

        self.Entry1_5 = tk.Entry(top)
        self.Entry1_5.place(relx=0.462, rely=0.539,height=24, relwidth=0.277)
        self.Entry1_5.configure(background="white")
        self.Entry1_5.configure(disabledforeground="#a3a3a3")
        self.Entry1_5.configure(font=font10)
        self.Entry1_5.configure(foreground="#000000")
        self.Entry1_5.configure(highlightbackground="#d9d9d9")
        self.Entry1_5.configure(highlightcolor="black")
        self.Entry1_5.configure(insertbackground="black")
        self.Entry1_5.configure(selectbackground="#c4c4c4")
        self.Entry1_5.configure(selectforeground="black")

        self.Label1_5 = tk.Label(top)
        self.Label1_5.place(relx=0.014, rely=0.7, height=31, width=314)
        self.Label1_5.configure(activebackground="#f9f9f9")
        self.Label1_5.configure(activeforeground="black")
        self.Label1_5.configure(background="#91d1d8")
        self.Label1_5.configure(disabledforeground="#a3a3a3")
        self.Label1_5.configure(foreground="#000000")
        self.Label1_5.configure(highlightbackground="#d9d9d9")
        self.Label1_5.configure(highlightcolor="black")
        self.Label1_5.configure(text='''Latest date: release for transportation''')

        self.Label1_6 = tk.Label(top)
        self.Label1_6.place(relx=0.014, rely=0.862, height=31, width=314)
        self.Label1_6.configure(activebackground="#f9f9f9")
        self.Label1_6.configure(activeforeground="black")
        self.Label1_6.configure(background="#91d1d8")
        self.Label1_6.configure(disabledforeground="#a3a3a3")
        self.Label1_6.configure(foreground="#000000")
        self.Label1_6.configure(highlightbackground="#d9d9d9")
        self.Label1_6.configure(highlightcolor="black")
        self.Label1_6.configure(text='''Input date: release for transportation''')



        self.Text2 = tk.Text(top)
        self.Text2.place(relx=0.462, rely=0.760, relheight=0.04, relwidth=0.3
                , bordermode='ignore')
        self.Text2.configure(background="white")
        self.Text2.configure(font=font9)
        self.Text2.configure(foreground="black")
        self.Text2.configure(highlightbackground="#d9d9d9")
        self.Text2.configure(highlightcolor="black")
        self.Text2.configure(insertbackground="black")
        self.Text2.configure(selectbackground="#c4c4c4")
        self.Text2.configure(selectforeground="black")
        self.Text2.configure(width=264)
        self.Text2.configure(wrap='word')


        def Query_trans_release():
            order_ID = self.Entry1.get()
            for i in range(len(df_transport)):
                for j in range(len(df_ETOs)):
                    if df_transport.loc[i, 'order_ID'] == order_ID and df_ETOs.loc[j, 'order_ID']==order_ID:
                        a = df_ETOs.loc[j, 'task_ID']
                        for k in range(len(df_tasks)):
                            if df_tasks.loc[k, 'task_ID'] == a:
                                need_date = df_tasks.loc[k, 'Start_Date']
                                query_date = need_date - timedelta(days=float(df_transport.loc[i,'t_leadtime']))
                            else:
                                pass
                    else:
                        pass
            self.Text2.insert(END, query_date)


        self.Button1_7 = tk.Button(top, command=Query_trans_release)
        self.Button1_7.place(relx=0.462, rely=0.7, height=31, width=81)
        self.Button1_7.configure(activebackground="#ececec")
        self.Button1_7.configure(activeforeground="#000000")
        self.Button1_7.configure(background="#d9d9d9")
        self.Button1_7.configure(disabledforeground="#a3a3a3")
        self.Button1_7.configure(foreground="#000000")
        self.Button1_7.configure(highlightbackground="#d9d9d9")
        self.Button1_7.configure(highlightcolor="black")
        self.Button1_7.configure(pady="0")
        self.Button1_7.configure(text='''Query''')


        self.Entry3 = tk.Entry(top)
        self.Entry3.place(relx=0.462, rely=0.870, height=24, relwidth=0.300)
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font=font10)
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(highlightbackground="#d9d9d9")
        self.Entry3.configure(highlightcolor="black")
        self.Entry3.configure(insertbackground="black")
        self.Entry3.configure(selectbackground="#c4c4c4")
        self.Entry3.configure(selectforeground="black")

        def Update_trans_release():
            order_ID = self.Entry1.get()
            Actual_release = self.Entry3.get()
            for i in range(len(df_transport)):
                if df_transport.loc[i, 'order_ID'] == order_ID:
                    df_transport.loc[i, 'Actual_release_date']=Actual_release
                else:
                    pass
            df_transport.to_sql('transport_process', conn, if_exists='replace', index=False)
            conn.commit()

        self.Button3 = tk.Button(top, command=Update_trans_release)
        self.Button3.place(relx=0.462, rely=0.920, height=31, width=81)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Update''')


        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.014, rely=0.664, relwidth=0.965)

if __name__ == '__main__':
    vp_start_gui()





