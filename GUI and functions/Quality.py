#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 07, 2018 05:59:00 PM CET  platform: Windows NT
import _constants
today = _constants.Current_date()

import datetime
import time
from datetime import timedelta
import pandas as pd
import sqlite3
from tkinter import *
from tkinter import messagebox



pd.set_option('display.max_columns', 500)

conn = sqlite3.connect(
    'C:\\Users\\chenqi\\polybox\\Qian\\1 Doctoral Research\\16.02-AMF\\P6 GUI development\\data\\Aturm.sqlite')
cur = conn.cursor()

df_MP = pd.read_sql_query('select * from manufacturing_process', conn)
df_ETOs = pd.read_sql_query('select * from Structural_Column_Material_Takeoff', conn)
df_changes_field = pd.read_sql_query('select * from changes_field', conn)
df_changes_production = pd.read_sql_query('select * from changes_production', conn)
df_tasks = pd.read_sql_query('select * from Tasks', conn)
df_transport = pd.read_sql_query('select * from transport_process', conn)
df_inspection = pd.read_sql_query('select * from inspection', conn)
df_constraints = pd.read_sql_query('select * from construction_constraints', conn)

df_task_join = pd.merge(df_tasks,df_constraints, how='inner', on='task_ID')       # inner join the task with construction constraints



import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Quality_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    Quality_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    Quality_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        font10 = "-family {Courier New} -size 10 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x841+358+150")
        top.title("Quality inspection")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        top.wm_iconbitmap('logo.ico')

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.017, rely=0.012, relheight=0.422
                , relwidth=0.967)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Quality inspection''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")
        self.Labelframe1.configure(width=580)

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(relx=0.017, rely=0.141, height=61, width=164
                , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d8a6bf")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Scan RFID tag''')
        self.Label1.configure(width=164)

        self.Label1_2 = tk.Label(self.Labelframe1)
        self.Label1_2.place(relx=0.017, rely=0.451, height=21, width=164
                , bordermode='ignore')
        self.Label1_2.configure(activebackground="#f9f9f9")
        self.Label1_2.configure(activeforeground="black")
        self.Label1_2.configure(background="#d8a6bf")
        self.Label1_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2.configure(foreground="#000000")
        self.Label1_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2.configure(highlightcolor="black")
        self.Label1_2.configure(text='''Certificate /  Standards''')

        self.Label1_3 = tk.Label(self.Labelframe1)
        self.Label1_3.place(relx=0.017, rely=0.535, height=21, width=164
                , bordermode='ignore')
        self.Label1_3.configure(activebackground="#f9f9f9")
        self.Label1_3.configure(activeforeground="black")
        self.Label1_3.configure(background="#d8a6bf")
        self.Label1_3.configure(disabledforeground="#a3a3a3")
        self.Label1_3.configure(foreground="#000000")
        self.Label1_3.configure(highlightbackground="#d9d9d9")
        self.Label1_3.configure(highlightcolor="black")
        self.Label1_3.configure(text='''Inspection staff name''')

        self.Entry1 = tk.Entry(self.Labelframe1)
        self.Entry1.place(relx=0.328, rely=0.535, height=24, relwidth=0.352
                , bordermode='ignore')
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font=font10)
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")

        self.Label1_4 = tk.Label(self.Labelframe1)
        self.Label1_4.place(relx=0.017, rely=0.62, height=21, width=164
                , bordermode='ignore')
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#d8a6bf")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#d9d9d9")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''Inspection date''')

        self.Label1_5 = tk.Label(self.Labelframe1)
        self.Label1_5.place(relx=0.017, rely=0.817, height=31, width=194
                , bordermode='ignore')
        self.Label1_5.configure(activebackground="#f9f9f9")
        self.Label1_5.configure(activeforeground="black")
        self.Label1_5.configure(background="#d8a6bf")
        self.Label1_5.configure(disabledforeground="#a3a3a3")
        self.Label1_5.configure(foreground="#000000")
        self.Label1_5.configure(highlightbackground="#d9d9d9")
        self.Label1_5.configure(highlightcolor="black")
        self.Label1_5.configure(text='''Need temporary storage?''')
        self.Label1_5.configure(width=194)

        option1 = StringVar()
        self.Radiobutton1 = tk.Radiobutton(self.Labelframe1, value = '1', variable = option1)
        self.Radiobutton1.place(relx=0.397, rely=0.817, relheight=0.087
                , relwidth=0.088, bordermode='ignore')
        self.Radiobutton1.configure(activebackground="#ececec")
        self.Radiobutton1.configure(activeforeground="#000000")
        self.Radiobutton1.configure(background="#d9d9d9")
        self.Radiobutton1.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1.configure(foreground="#000000")
        self.Radiobutton1.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1.configure(highlightcolor="black")
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(text='''Yes''')

        self.Radiobutton1_7 = tk.Radiobutton(self.Labelframe1, value = '0', variable = option1)
        self.Radiobutton1_7.place(relx=0.552, rely=0.817, relheight=0.07
                , relwidth=0.1, bordermode='ignore')
        self.Radiobutton1_7.configure(activebackground="#ececec")
        self.Radiobutton1_7.configure(activeforeground="#000000")
        self.Radiobutton1_7.configure(background="#d9d9d9")
        self.Radiobutton1_7.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1_7.configure(foreground="#000000")
        self.Radiobutton1_7.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1_7.configure(highlightcolor="black")
        self.Radiobutton1_7.configure(justify='left')
        self.Radiobutton1_7.configure(text='''No''')

        self.Entry3 = tk.Entry(self.Labelframe1)
        self.Entry3.place(relx=0.328, rely=0.141, height=64, relwidth=0.352
                , bordermode='ignore')
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font=font10)
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(insertbackground="black")
        self.Entry3.configure(width=204)

        self.Entry4 = tk.Entry(self.Labelframe1)
        self.Entry4.place(relx=0.328, rely=0.451, height=24, relwidth=0.352
                , bordermode='ignore')
        self.Entry4.configure(background="white")
        self.Entry4.configure(disabledforeground="#a3a3a3")
        self.Entry4.configure(font=font10)
        self.Entry4.configure(foreground="#000000")
        self.Entry4.configure(insertbackground="black")

        self.Entry5 = tk.Entry(self.Labelframe1)
        self.Entry5.place(relx=0.328, rely=0.62, height=24, relwidth=0.352
                , bordermode='ignore')
        self.Entry5.configure(background="white")
        self.Entry5.configure(disabledforeground="#a3a3a3")
        self.Entry5.configure(font=font10)
        self.Entry5.configure(foreground="#000000")
        self.Entry5.configure(insertbackground="black")




        def Update_inspection():
            RFID = self.Entry3.get()
            certficate = self.Entry4.get()
            inspect_staff = self.Entry1.get()
            inspect_date = self.Entry5.get()

            temporary_storage = option1.get()

            for i in range(len(df_inspection)):
                for j in range(len(df_ETOs)):
                    if df_inspection.loc[i, 'RFID'] == RFID and df_ETOs.loc[j, 'RFID']==RFID:
                        df_inspection.loc[i, 'certification'] = certficate
                        df_inspection.loc[i, 'inspect_staff'] = inspect_staff
                        df_inspection.loc[i, 'inspect_date'] = inspect_date
                        info = [df_ETOs.loc[j, 'Family'] + ' ' + df_ETOs.loc[j, 'Type'], df_ETOs.loc[j, 'Length']]
                        if temporary_storage == '1':
                            df_inspection.loc[i, 'temp_storage'] = 'Y'
                        elif temporary_storage == '0':
                            df_inspection.loc[i, 'temp_storage'] = 'N'
                        else:
                            pass
                    else:
                        pass
            else:
                pass

            messagebox.showinfo('Notification', info)
            df_inspection.to_sql('inspection', conn, if_exists='replace', index=False)
            conn.commit()


        self.Button2 = tk.Button(self.Labelframe1, command = Update_inspection)
        self.Button2.place(relx=0.776, rely=0.817, height=33, width=116
                , bordermode='ignore')
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Update''')
        self.Button2.configure(width=116)

        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.017, rely=0.44, relheight=0.541
                , relwidth=0.967)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''Inspection results''')
        self.Labelframe2.configure(background="#d9d9d9")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="black")
        self.Labelframe2.configure(width=580)

        option2 = StringVar()

        self.Radiobutton2 = tk.Radiobutton(self.Labelframe2, value = '0', variable = option2)
        self.Radiobutton2.place(relx=0.017, rely=0.066, relheight=0.068
                , relwidth=0.409, bordermode='ignore')
        self.Radiobutton2.configure(activebackground="#ececec")
        self.Radiobutton2.configure(activeforeground="#000000")
        self.Radiobutton2.configure(background="#d9d9d9")
        self.Radiobutton2.configure(disabledforeground="#a3a3a3")
        self.Radiobutton2.configure(foreground="#000000")
        self.Radiobutton2.configure(highlightbackground="#d9d9d9")
        self.Radiobutton2.configure(highlightcolor="black")
        self.Radiobutton2.configure(justify='left')
        self.Radiobutton2.configure(text='''Approved, send to staging area''')

        self.Radiobutton2_10 = tk.Radiobutton(self.Labelframe2, value = '1', variable = option2)
        self.Radiobutton2_10.place(relx=0.448, rely=0.066, relheight=0.055
                , relwidth=0.469, bordermode='ignore')
        self.Radiobutton2_10.configure(activebackground="#ececec")
        self.Radiobutton2_10.configure(activeforeground="#000000")
        self.Radiobutton2_10.configure(background="#d9d9d9")
        self.Radiobutton2_10.configure(disabledforeground="#a3a3a3")
        self.Radiobutton2_10.configure(foreground="#000000")
        self.Radiobutton2_10.configure(highlightbackground="#d9d9d9")
        self.Radiobutton2_10.configure(highlightcolor="black")
        self.Radiobutton2_10.configure(justify='left')
        self.Radiobutton2_10.configure(text='''Defected, ask for re-shipping''')
        self.Radiobutton2_10.configure(width=272)

        def show_task():
            self.Scrolledlistbox2.delete('0', 'END')

            tree = ttk.Treeview(self.Scrolledlistbox2, columns=(1, 2, 3, 4, 5, 6 ,7, 8, 9, 10), show='headings')
            tree.heading(1, text='RFID')
            tree.heading(2, text='task ID')
            tree.heading(3, text='Family and Type')
            tree.heading(4, text='Planned Start')
            tree.heading(5, text='Planned Finish')
            tree.heading(6, text='Space')
            tree.heading(7, text='Machine')
            tree.heading(8, text='Labor')
            tree.heading(9, text='Precedence')
            tree.heading(10, text='Permits')
            tree.pack()
            scroll = ttk.Scrollbar(self.Scrolledlistbox2, orient="vertical", command=tree.yview)
            tree.configure(yscrollcommand=scroll.set)

            RFID = self.Entry3.get()

            for i in range(len(df_inspection)):
                for j in range(len(df_ETOs)):
                    if df_inspection.loc[i,'RFID'] == RFID and df_ETOs.loc[j,'RFID']==RFID:
                        a = df_ETOs.loc[i, 'task_ID']
                        for k in range(len(df_task_join)):
                            if a == df_task_join.loc[k, 'task_ID']:
                                tree.insert('','end',values = (RFID, df_task_join.loc[k, 'task_ID'], df_ETOs.loc[j, 'Family']+' '+df_ETOs.loc[j, 'Type'],
                                                               df_task_join.loc[k, 'Start_Date'], df_task_join.loc[k, 'Finish_Date'],
                                                               df_task_join.loc[k, 'space_prep'], df_task_join.loc[k, 'machine_prep'],df_task_join.loc[k, 'labor_prep'],
                                                               df_task_join.loc[k, 'precedentials'], df_task_join.loc[k, 'permits']))


        self.Button1 = tk.Button(self.Labelframe2, command = show_task)
        self.Button1.place(relx=0.017, rely=0.549, height=24, width=163
                , bordermode='ignore')
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Show all related tasks''')

        self.Scrolledlistbox2 = ScrolledListBox(self.Labelframe2)
        self.Scrolledlistbox2.place(relx=0.017, rely=0.615, relheight=0.363
                , relwidth=0.967, bordermode='ignore')
        self.Scrolledlistbox2.configure(background="white")
        self.Scrolledlistbox2.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox2.configure(font=font10)
        self.Scrolledlistbox2.configure(foreground="black")
        self.Scrolledlistbox2.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox2.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox2.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox2.configure(selectforeground="black")
        self.Scrolledlistbox2.configure(width=10)

        self.Label1_4 = tk.Label(self.Labelframe2)
        self.Label1_4.place(relx=0.017, rely=0.154, height=31, width=164
                , bordermode='ignore')
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#d8a6bf")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#d9d9d9")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''Defect root cause''')
        self.Label1_4.configure(width=164)

        option3 = StringVar()

        self.Radiobutton3 = tk.Radiobutton(self.Labelframe2, value = 'R1', variable = option3)
        self.Radiobutton3.place(relx=0.345, rely=0.154, relheight=0.068
                , relwidth=0.405, bordermode='ignore')
        self.Radiobutton3.configure(activebackground="#ececec")
        self.Radiobutton3.configure(activeforeground="#000000")
        self.Radiobutton3.configure(background="#d9d9d9")
        self.Radiobutton3.configure(disabledforeground="#a3a3a3")
        self.Radiobutton3.configure(foreground="#000000")
        self.Radiobutton3.configure(highlightbackground="#d9d9d9")
        self.Radiobutton3.configure(highlightcolor="black")
        self.Radiobutton3.configure(justify='left')
        self.Radiobutton3.configure(text='''Damage due to production process''')

        self.Radiobutton3_6 = tk.Radiobutton(self.Labelframe2, value = 'R2', variable = option3)
        self.Radiobutton3_6.place(relx=0.379, rely=0.22, relheight=0.055
                , relwidth=0.430, bordermode='ignore')
        self.Radiobutton3_6.configure(activebackground="#ececec")
        self.Radiobutton3_6.configure(activeforeground="#000000")
        self.Radiobutton3_6.configure(background="#d9d9d9")
        self.Radiobutton3_6.configure(disabledforeground="#a3a3a3")
        self.Radiobutton3_6.configure(foreground="#000000")
        self.Radiobutton3_6.configure(highlightbackground="#d9d9d9")
        self.Radiobutton3_6.configure(highlightcolor="black")
        self.Radiobutton3_6.configure(justify='left')
        self.Radiobutton3_6.configure(text='''Damage due to inappropriate loading''')
        self.Radiobutton3_6.configure(width=191)

        self.Radiobutton3_8 = tk.Radiobutton(self.Labelframe2, value='R3', variable=option3)
        self.Radiobutton3_8.place(relx=0.431, rely=0.286, relheight=0.055
                                  , relwidth=0.398, bordermode='ignore')
        self.Radiobutton3_8.configure(activebackground="#ececec")
        self.Radiobutton3_8.configure(activeforeground="#000000")
        self.Radiobutton3_8.configure(background="#d9d9d9")
        self.Radiobutton3_8.configure(disabledforeground="#a3a3a3")
        self.Radiobutton3_8.configure(foreground="#000000")
        self.Radiobutton3_8.configure(highlightbackground="#d9d9d9")
        self.Radiobutton3_8.configure(highlightcolor="black")
        self.Radiobutton3_8.configure(justify='left')
        self.Radiobutton3_8.configure(text='''Damage due to inappropriate unloading''')
        self.Radiobutton3_8.configure(width=231)


        self.Radiobutton3_7 = tk.Radiobutton(self.Labelframe2, value = 'R4', variable = option3)
        self.Radiobutton3_7.place(relx=0.466, rely=0.352, relheight=0.055
                , relwidth=0.364, bordermode='ignore')
        self.Radiobutton3_7.configure(activebackground="#ececec")
        self.Radiobutton3_7.configure(activeforeground="#000000")
        self.Radiobutton3_7.configure(background="#d9d9d9")
        self.Radiobutton3_7.configure(disabledforeground="#a3a3a3")
        self.Radiobutton3_7.configure(foreground="#000000")
        self.Radiobutton3_7.configure(highlightbackground="#d9d9d9")
        self.Radiobutton3_7.configure(highlightcolor="black")
        self.Radiobutton3_7.configure(justify='left')
        self.Radiobutton3_7.configure(text='''lost/stolen pieces''')
        self.Radiobutton3_7.configure(width=211)


        def Update_result():
            RFID = self.Entry3.get()
            results = option2.get()
            root_cause = option3.get()

            for i in range(len(df_inspection)):
                if RFID == df_inspection.loc[i, 'RFID']:
                    if results == '0':
                        df_inspection.loc[i, 'quality_check'] = 'Pass'
                        df_inspection.loc[i, 'defect'] = '-'
                    elif results == '1':
                        if root_cause == 'R1':
                            df_inspection.loc[i, 'quality_check'] = 'Fail'
                            df_inspection.loc[i, 'defect'] = 'Damage due to production process'
                        elif root_cause == 'R2':
                            df_inspection.loc[i, 'defect'] = 'Damage due to inappropriate loading'
                        elif root_cause == 'R3':
                            df_inspection.loc[i, 'defect'] = 'Damage due to inappropriate unloading'
                        elif root_cause == 'R4':
                            df_inspection.loc[i, 'defect'] = 'lost/stolen pieces'
                        else:
                            pass
                    else:
                        pass
                else:
                    pass
            df_inspection.to_sql('inspection', conn, if_exists='replace', index=False)
            conn.commit()


        self.Button3 = tk.Button(self.Labelframe2, command=Update_result)
        self.Button3.place(relx=0.776, rely=0.44, height=33, width=106
                , bordermode='ignore')
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Update''')
        self.Button3.configure(width=106)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





